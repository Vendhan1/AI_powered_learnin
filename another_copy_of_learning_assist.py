# -*- coding: utf-8 -*-
"""Another copy of learning_assist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10MwAhe5MvEdiMno-w3D4UPrlP_h-EEqX
"""

pip install -U g4f[all]

text = '''Disambiguation pages on Wikipedia are used as a process of resolving conflicts in article titles that occur when a single term can be associated with more than one topic, making that term likely to be the natural title for more than one article. In other words, disambiguations are paths leading to different articles which could, in principle, have the same title.

For example, the word "Mercury" can refer to several things, including an element, a planet, and a Roman god. Since only one Wikipedia page can have the generic name Mercury, unambiguous article titles are used for each of these topics: Mercury (element), Mercury (planet), Mercury (mythology), etc. There must then be a way to direct the reader to the correct specific article when the ambiguous word "Mercury" is referenced by linking, browsing or searching; this is what is known as disambiguation. In this case, it is achieved using Mercury as the title of a disambiguation page.

There are three common disambiguation scenarios, of which the following are examples:

The page at Joker is a disambiguation page, leading to all the alternative uses of "Joker". It has a {{Disambiguation}} template at the bottom.
The page at Rice is about one usage, called the primary topic or broad-concept, and there is a short message at the top of the article, called a hatnote and created with at Hatnote templates, guiding readers to Rice (disambiguation) for the other less common uses of the term.
The page at Anita Hill is about the primary topic, and there are only two other uses. The other uses are linked directly using the hatnotes created with the {{For}} template; no disambiguation page is needed.
Occasionally, a link may direct a reader to a disambiguation page instead of the intended article. The original page can be edited to link directly to the correct destination. Such edits are encouraged, as Wikipedia is a collaborative platform that welcomes contributions from all users.

Occasionally, a reader may follow a link that ends up at a disambiguation page rather than at one of the links shown on that page. The original page can be edited to link directly to its intended destination. Feel free to make such edits; everyone is welcome to improve Wikipedia, including you. It could be you who makes the overall experience of Wikipedia that much better.'''

def generate_prompt(text):
    prompt_template = (
       "Sort this text content into '{text}' into topic and their explanation using the given text"
    )
    return prompt_template.format(text=text)
prompt = generate_prompt(text)
print(prompt)

from g4f.client import Client

client = Client()
response = client.chat.completions.create(
    model="gpt-4",
    messages=[{"role": "user", "content": prompt}],
    # Add any other necessary parameters
)
print(response.choices[0].message.content)

import csv
from g4f.client import Client

client = Client()

def ask_question(question):
    """Function to ask a question and get a response."""
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are an interactive learning assistant."},
            {"role": "user", "content": question},
        ],
        temperature=0.8,
        max_tokens=150
    )
    return response.choices[0].message.content

def generate_roadmap(responses, course):
    """Generate a weekly learning roadmap based on user responses."""
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are an expert in creating tailored learning roadmaps."},
            {"role": "user", "content": f"Based on the responses for the {course}, create a weekly roadmap with blog and YouTube resources: {responses}"}
        ],
        temperature=0.9,
        max_tokens=300
    )
    return response.choices[0].message.content

def provide_feedback_and_ask_next(question, learner_response):
    """Provide feedback based on learner's response and ask the next question."""
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a friendly assistant helping someone with their learning journey."},
            {"role": "user", "content": f"Learner's response: {learner_response}. Give them a friendly reply before asking the next question."},
            {"role": "assistant", "content": question}
        ],
        temperature=0.8,
        max_tokens=150
    )
    return response.choices[0].message.content

def save_roadmap_to_csv(roadmap, filename="learning_roadmap.csv"):
    """Save the weekly roadmap to a CSV file."""
    roadmap_lines = roadmap.split('\n')  # Split the roadmap by lines

    with open(filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Week", "Topic"])  # Write CSV headers

        for line in roadmap_lines:
            if line.startswith("Week"):
                week, topic = line.split(': ', 1)  # Separate week and topic by ": "
                writer.writerow([week.strip(), topic.strip()])  # Write week and topic to the CSV

if __name__ == "__main__":
    # Step 1: Define the course and key areas to ask about
    print("What are you currently interested in learning?")
    selected_course = input()

    questions = [
        f"What is your current understanding of {selected_course}? Feel free to share what you've explored so far.",
        f"What specific areas of {selected_course} are you most excited about or curious to learn more in depth?",
        "How much time can you dedicate to learning each week? This helps in planning a realistic schedule for you.",
        "Do you prefer diving into concepts, practical exercises, or a mix of both?",
        f"Are there any tools or skills related to {selected_course} that you already feel comfortable using?"
    ]

    # Step 2: Gather responses one at a time with feedback
    learner_responses = []
    for i, question in enumerate(questions):
        if i == 0:
            print(question)
        else:
            feedback = provide_feedback_and_ask_next(question, learner_responses[i - 1])
            print(feedback)

        learner_response = input("Your response: ")
        learner_responses.append(learner_response)

    # Step 3: Process the responses and generate the roadmap
    responses_summary = "\n".join(learner_responses)  # Combine responses for processing
    roadmap = generate_roadmap(responses_summary, selected_course)

    # Step 4: Display the tailored roadmap in week-by-week format
    print("\nTailored Learning Roadmap (Week-by-Week):")
    print(roadmap)

    # Step 5: Save the roadmap to a CSV file
    save_roadmap_to_csv(roadmap)
    print(f"\nThe learning roadmap has been saved to 'learning_roadmap.csv'")

