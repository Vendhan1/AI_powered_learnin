# -*- coding: utf-8 -*-
"""ROADMAP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FzICBkrLj7N2wSTkKMiexeG-B8rkto-r
"""

from g4f.client import Client
import json
import re
import nltk
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api import YouTubeTranscriptApi, NoTranscriptFound
from nltk.tokenize import sent_tokenize
from nltk.probability import FreqDist
from heapq import nlargest
from googlesearch import search
import requests
from bs4 import BeautifulSoup

client = Client()
def GPT(prompt):
    response = client.chat.completions.create(
      model="gpt-4",
      messages=[{"role": "user", "content": prompt}],

    )
    return response.choices[0].message.content

def course_prompt(domain,specifics,depth,level):
    prompt_template = (
'''Generate a well-structured list of topics to enhance skills in the domain of '{domain}', focusing specifically on '{specifics}'. Ensure the depth of coverage matches '{depth}', considering that the learner's proficiency level is '{level}'.
Format the response as a JSON object where each topic is categorized and associated with relevant subtopics.
Format the response strictly as a JSON object where each topic is categorized and associated with relevant subtopics.
Start the response directly with the opening curly brace {{.
Example output format:
{{
  "Course_name":"{Generate the Course name}",
  "domain": "{domain}",
  "specifics": "{specifics}",
  "depth": "{depth}",
  "level": "{level}",
  "topics": [
    {{
      "name": "Main Topic 1",
      "subtopics": ["Subtopic 1", "Subtopic 2", "Subtopic 3"]
    }},
    {{
      "name": "Main Topic 2",
      "subtopics": ["Subtopic A", "Subtopic B"]
    }}
  ]
}}
'''
    )
    return prompt_template.format(domain=domain,specifics=specifics,depth=depth,level=level)


def roadmap(user_json,search_json):
    if search_json.get("search","")=='manual':
      prompt=user_json.get("response")
    else:
      domain=user_json.get("domain","")
      specifics=user_json.get("specifics","")
      depth =user_json.get("depth","")
      level=user_json.get("level","")
    generated_prompt = course_prompt(domain,specifics,depth,level)
    content=GPT(generated_prompt)
    json_content=json.loads(content)
    return json_content
