# -*- coding: utf-8 -*-
"""YT_SUMMARY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k-FeFyB5VYgDD0hbVsLfD9Vmm5WxvDKR
"""

#!pip install -U g4f[all]
#!pip install youtube-transcript-api nltk

from g4f.client import Client
import json
import re
import nltk
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api import YouTubeTranscriptApi, NoTranscriptFound
from nltk.tokenize import sent_tokenize
from nltk.probability import FreqDist
from heapq import nlargest
from googlesearch import search
import requests
from bs4 import BeautifulSoup

client = Client()
def GPT(prompt):
    response = client.chat.completions.create(
      model="gpt-4",

      messages=[{"role": "user", "content": prompt}],

)
    return response.choices[0].message.content

# Download NLTK resources
nltk.download("punkt")
nltk.download("punkt_tab")

def get_youtube_links(query,num_results=3):
    query = f"{query} site:youtube.com"
    return [url for url in search(query, num=num_results, stop=num_results, pause=2)]


# Function to extract video ID from YouTube URL
def get_video_id(youtube_link):
    pattern = r"(?<=v=)[^&]+"
    match = re.search(pattern, youtube_link)
    return match.group() if match else None

# Function to retrieve transcript
def get_transcript(video_id):
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id)
        return " ".join([item["text"] for item in transcript])
    except NoTranscriptFound:
        print(f"No transcript found for video ID: {video_id}")
        return None # Return None if no transcript is found
    except Exception as e:
        print(f"An error occurred while fetching transcript for video ID {video_id}: {e}")
        return None # Return None for other errors

# Function to summarize transcript
def summarize_text(text, num_sentences=5):
    if not text: # Handle case where text is None (no transcript)
        return None
    sentences = sent_tokenize(text)
    word_freq = FreqDist(nltk.word_tokenize(text.lower()))
    scored_sentences = {sent: sum(word_freq[word] for word in nltk.word_tokenize(sent.lower())) for sent in sentences}
    summary = nlargest(num_sentences, scored_sentences, key=scored_sentences.get)
    return " ".join(summary)


def yt_prompt(summary_text,youtube_url):
    prompt_template = ('''You are an interactive learning assistant specializing in summarizing educational content from video transcripts. Given the raw audio-to-text transcription extracted from the YouTube video  '{youtube_url}'  ('{summary_text}'), create a structured summary highlighting the key concepts covered. Ensure the summary maintains clarity and logical flow, making it suitable for educational purposes. Include:

Title: A concise and relevant title capturing the video's topic.

Summary: A well-structured, digestible overview covering main points.

Key Learnings: Bullet points summarizing essential takeaways.

Examples or Applications: Real-world uses, if mentioned.

Further Exploration: Suggested topics or related lessons for deeper understanding.

Keep the tone engaging yet informative, making the content accessible to learners. Aim for conciseness while ensuring completeness.'''

    )
    return prompt_template.format(summary_text=summary_text,youtube_url=youtube_url)

def yt_text(youtube_url):
  video_id = get_video_id(youtube_url)
  if video_id:
      transcript_text = get_transcript(video_id)
      # Check if transcript_text is not None before proceeding
      if transcript_text:
          summary_text = summarize_text(transcript_text)
          # Check if summary_text is not None before proceeding
          if summary_text:
              generated_prompt=yt_prompt(summary_text,youtube_url)
              yt_text_content=GPT(generated_prompt) # Changed variable name to avoid shadowing function
              return yt_text_content
          else:
              print(f"Failed to summarize transcript for {youtube_url}")
              return None
      else:
          print(f"Failed to get transcript for {youtube_url}")
          return None
  else:
      print("Invalid YouTube URL")
      return None